<?php
/**
 * CSSTidy - CSS Parser and Optimiser
 *
 * CSS Printing class
 * This class prints CSS data generated by csstidy.
 *
 * Copyright 2005, 2006, 2007 Florian Schmitz
 *
 * This file is part of CSSTidy.
 *
 *   CSSTidy is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU Lesser General Public License as published by
 *   the Free Software Foundation; either version 2.1 of the License, or
 *   (at your option) any later version.
 *
 *   CSSTidy is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU Lesser General Public License for more details.
 *
 *   You should have received a copy of the GNU Lesser General Public License
 *   along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * @license http://opensource.org/licenses/lgpl-license.php GNU Lesser General Public License
 * @package csstidy
 * @author Florian Schmitz (floele at gmail dot com) 2005-2007
 * @author Brett Zamir (brettz9 at yahoo dot com) 2007
 * @author Thomas Hruska 2010
 */

/**
 * CSS Printing class
 *
 * This class prints CSS data generated by csstidy.
 *
 * @package csstidy
 * @author Florian Schmitz (floele at gmail dot com) 2005-2006
 * @version 1.0
 */

class csstidy_print
{
    /**
     * Saves the input CSS string
     * @var string
     * @access private
     */
    var $input_css = '';

    /**
     * Saves the formatted CSS string
     * @var string
     * @access public
     */
    var $output_css = '';

    /**
     * Saves the formatted CSS string (plain text)
     * @var string
     * @access public
     */
    var $output_css_plain = '';

    /**
     * Constructor
     * @param array $css contains the class csstidy
     * @access private
     * @version 1.0
     */
    function csstidy_print(&$css)
    {
        $this->parser    =& $css;
        $this->css       =& $css->css;
        $this->template  =& $css->template;
        $this->tokens    =& $css->tokens;
        $this->charset   =& $css->charset;
        $this->import    =& $css->import;
        $this->namespace =& $css->namespace;
    }

    /**
     * Resets output_css and output_css_plain (new css code)
     * @access private
     * @version 1.0
     */
    function _reset()
    {
        $this->output_css = '';
        $this->output_css_plain = '';
    }

    /**
     * Returns the CSS code as plain text
     * @return string
     * @access public
     * @version 1.0
     */
    function plain()
    {
        $this->_print(true);
        return $this->output_css_plain;
    }

    /**
     * Returns the formatted CSS code
     * @return string
     * @access public
     * @version 1.0
     */
    function formatted()
    {
        $this->_print(false);
        return $this->output_css;
    }

	/**
     * Returns the formatted CSS code to make a complete webpage
     * @param string $doctype shorthand for the document type
     * @param bool $externalcss indicates whether styles to be attached internally or as an external stylesheet
     * @param string $title title to be added in the head of the document
     * @param string $lang two-letter language code to be added to the output
     * @return string
     * @access public
     * @version 1.4
     */
	function formatted_page($doctype='xhtml1.1', $externalcss=true, $title='', $lang='en')
	{
		switch ($doctype) {
			case 'xhtml1.0strict':
				$doctype_output = '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
			"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">';
				break;
			case 'xhtml1.1':
			default:
				$doctype_output = '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN"
				"http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">';
				break;
		}

		$output = $cssparsed = '';
		$this->output_css_plain =& $output;

		$output .= $doctype_output."\n".'<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="'.$lang.'"';
		$output .= ($doctype === 'xhtml1.1') ? '>' : ' lang="'.$lang.'">';
		$output .= "\n<head>\n    <title>$title</title>";

		if ($externalcss) {
			$output .= "\n    <style type=\"text/css\">\n";
			$cssparsed = file_get_contents('cssparsed.css');
			$output .= $cssparsed; // Adds an invisible BOM or something, but not in css_optimised.php
			$output .= "\n</style>";
		}
		else {
				$output .= "\n".'    <link rel="stylesheet" type="text/css" href="cssparsed.css" />';
//			}
		}
		$output .= "\n</head>\n<body><code id=\"copytext\">";
		$output .= $this->formatted();
		$output .= '</code>'."\n".'</body></html>';
		return $this->output_css_plain;
	}

    /**
     * Returns the formatted CSS Code and saves it into $this->output_css and $this->output_css_plain
     * @param bool $plain plain text or not
     * @access private
     * @version 2.0
     */
    function _print($plain = false)
    {
        if ($this->output_css && $this->output_css_plain) {
            return;
        }

        $output = '';
        if (!$this->parser->get_cfg('preserve_css')) {
            $this->_convert_raw_css();
        }

        $template =& $this->template;

        if ($plain) {
            $template = array_map('strip_tags', $template);
        }

        if ($this->parser->get_cfg('timestamp')) {
            array_unshift($this->tokens, array(COMMENT, ' CSSTidy ' . $this->parser->version . ': ' . date('r') . ' '));
        }

        if (!empty($this->charset)) {
            $output .= $template[0].'@charset'.$template[14].$this->charset.$template[6];
        }

        if (!empty($this->import)) {
            for ($i = 0, $size = count($this->import); $i < $size; $i ++) {
                if(substr($this->import[$i], 0, 4) === 'url(' && substr($this->import[$i], -1, 1) === ')') {
                    $this->import[$i] = '"'.substr($this->import[$i], 4, -1).'"';
                    $this->parser->log('Optimised @import : Removed "url("','Information');
                }
                $output .= $template[0].'@import'.$template[14].$this->import[$i].$template[6];
            }
        }

        if (!empty($this->namespace)) {
                if(substr($this->namespace, 0, 4) === 'url('  && substr($this->namespace, -1, 1) === ')') {
                    $this->namespace = '"'.substr($this->namespace, 4, -1).'"';
                    $this->parser->log('Optimised @namespace : Removed "url("','Information');
                }
            $output .= $template[0].'@namespace'.$template[14].$this->namespace.$template[6];
        }

        if (!empty($this->charset) || !empty($this->import) || !empty($this->namespace)) {
            $output .= $template[13];
        }
        $in_at_out = '';
        $out =& $output;

        foreach ($this->tokens as $key => $token)
        {
            switch ($token[0])
            {
                case CSSTIDY_AT_START:
                    $out .= $template[0].$this->_htmlsp($token[1], $plain).$template[1];
                    $out =& $in_at_out;
                    break;

                case CSSTIDY_SEL_START:
                    if($this->parser->get_cfg('lowercase_s')) $token[1] = strtolower($token[1]);
                    if($token[1]{0} === '@') {
                        $out .= $template[0] . $this->_htmlsp($token[1], $plain);
                    } else {
                        $key2 = $this->_seeknextoftype($key, CSSTIDY_SEL_SEPARATE);
                        $key3 = $this->_seeknextoftype($key, CSSTIDY_SEL_END);
                        if ($key2 === false || $key3 === false || $key2 > $key3) {
                            $out .= $template[2] . $this->_htmlsp($token[1], $plain);
                        } else {
                            $new_sels = array();
                            $sellastpos = 0;
                            $new_sel_separate = $this->tokens[$key2][1];
                            $new_sel_separate[] = strlen($token[1]) + 1;
                            foreach($new_sel_separate as $selpos)
                            {
                                $new_sels[] = $this->_htmlsp(substr($token[1], $sellastpos, $selpos - $sellastpos - 1), $plain);
                                $sellastpos = $selpos;
                            }

                            if(count($new_sels) > 1 && isset($template[15])) {
                                $out .= $template[2] . implode($template[15], $new_sels);
                            } else {
                                $out .= $template[2] . $this->_htmlsp($token[1], $plain);
                            }
                        }
                    }
                    $out .= $template[3];
                    break;

                case CSSTIDY_PROPERTY:
                    if($this->parser->get_cfg('case_properties') === 2) $token[1] = strtoupper($token[1]);
                    if($this->parser->get_cfg('case_properties') === 1) $token[1] = strtolower($token[1]);
                    $out .= $template[4] . $this->_htmlsp($token[1], $plain) . ':' . $template[5];
                    break;

                case CSSTIDY_VALUE:
                    $out .= $this->_htmlsp($token[1], $plain);
                    if($this->_seeknextnocomment($key) == CSSTIDY_SEL_END && $this->parser->get_cfg('remove_last_;')) {
                        $out .= str_replace(';', '', $template[6]);
                    } else {
                        $out .= $template[6];
                    }
                    break;

                case CSSTIDY_SEL_END:
                    $out .= $template[7];
                    if($this->_seeknextnocomment($key) != CSSTIDY_AT_END) $out .= $template[8];
                    break;

                case CSSTIDY_AT_END:
                    $out =& $output;
                    $out .= $template[10] . str_replace("\n", "\n" . $template[10], $in_at_out);
                    $in_at_out = '';
                    $out .= $template[9];
                    break;

                case CSSTIDY_COMMENT:
                    $out .= $template[11] . '/*' . $this->_htmlsp($token[1], $plain) . '*/' . $template[12];
                    break;

                case CSSTIDY_SEL_SEPARATE:
                    break;

                default:
                    $this->parser->log('Skipping unknown token type ' . $token[0], 'Warning');
                    break;
            }
        }

        $output = trim($output);

        if (!$plain) {
            $this->output_css = $output;
            $this->_print(true);
        } else {
			// If using spaces in the template, don't want these to appear in the plain output
            $this->output_css_plain = str_replace('&#160;', '', $output);
        }
    }

    /**
     * Gets the next token type away from $key, excluding comments
     * @param integer $key current position
     * @return mixed false or a token type
     * @access private
     * @version 1.4
     */
    function _seeknextnocomment($key) {
        $key++;
        while (isset($this->tokens[$key]) && $this->tokens[$key][0] == CSSTIDY_COMMENT)  $key++;
        if (!isset($this->tokens[$key]))  return false;

        return $this->tokens[$key][0];
    }

    /**
     * Gets the next token key of $type away from $key
     * @param integer $key current position
     * @param integer $type current position
     * @return mixed false or a token key
     * @access private
     * @version 1.4
     */
    function _seeknextoftype($key, $type) {
        $key++;
        while (isset($this->tokens[$key]) && $this->tokens[$key][0] != $type)  $key++;
        if (!isset($this->tokens[$key]))  return false;

        return $key;
    }


    /**
     * Converts $this->css array to a raw array ($this->tokens)
     * @access private
     * @version 1.0
     */
    function _convert_raw_css()
    {
        $this->tokens = array();

        foreach ($this->css as $medium => $val)
        {
            if ($this->parser->get_cfg('sort_selectors')) ksort($val);
            if ($medium != CSSTIDY_DEFAULT_AT) {
                $this->parser->_add_token(CSSTIDY_AT_START, $medium, true);
            }

            foreach ($val as $selector => $vali)
            {
                if ($this->parser->get_cfg('sort_properties')) ksort($vali);
                $this->parser->_add_token(CSSTIDY_SEL_START, $selector, true);

                foreach ($vali as $property => $valj)
                {
                    if ($property == "/* SEL_SEPARATE */") {
                        $this->parser->_add_token(CSSTIDY_SEL_SEPARATE, $valj, true);
                    } else {
                        $this->parser->_add_token(CSSTIDY_PROPERTY, $property, true);
                        $this->parser->_add_token(CSSTIDY_VALUE, $valj, true);
                    }
                }

                $this->parser->_add_token(CSSTIDY_SEL_END, $selector, true);
            }

            if ($medium != CSSTIDY_DEFAULT_AT) {
                $this->parser->_add_token(CSSTIDY_AT_END, $medium, true);
            }
        }
    }

    /**
     * Same as htmlspecialchars, only that chars are not replaced if $plain !== true. This makes  print_code() cleaner.
     * @param string $string
     * @param bool $plain
     * @return string
     * @see csstidy_print::_print()
     * @access private
     * @version 1.0
     */
    function _htmlsp($string, $plain)
    {
        return ($plain ? $string : htmlspecialchars($string, ENT_QUOTES, 'utf-8'));
    }

    /**
     * Get compression ratio
     * @access public
     * @return float
     * @version 1.2
     */
    function get_ratio()
    {
        if (!$this->output_css_plain) {
            $this->formatted();
        }
        return round((strlen($this->input_css) - strlen($this->output_css_plain)) / strlen($this->input_css), 3) * 100;
    }

    /**
     * Get difference between the old and new code in bytes and prints the code if necessary.
     * @access public
     * @return string
     * @version 1.1
     */
    function get_diff()
    {
        if (!$this->output_css_plain) {
            $this->formatted();
        }

        $diff = strlen($this->output_css_plain) - strlen($this->input_css);

        if ($diff > 0) {
            return '+' . $diff;
        } elseif ($diff == 0) {
            return '+-' . $diff;
        }

        return $diff;
    }

    /**
     * Get the size of either input or output CSS in KB
     * @param string $loc default is "output"
     * @access public
     * @return integer
     * @version 1.0
     */
    function size($loc = 'output')
    {
        if ($loc === 'output' && !$this->output_css) {
            $this->formatted();
        }

        if ($loc === 'input') {
            return (strlen($this->input_css) / 1000);
        } else {
            return (strlen($this->output_css_plain) / 1000);
        }
    }
}
?>